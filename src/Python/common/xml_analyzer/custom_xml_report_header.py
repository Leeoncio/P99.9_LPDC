"""
Created on August 2021
@author: Martin Bustamante
@description: This programs customizes the xml report generated by Teststand
    so it has a better structure, more suited to our needs
"""

import socket, os, datetime
import xml.etree.ElementTree as ET


tree = ET.parse('C:\Luminar\TS_Automation\Results\Tests_Evaluation_Report[05 56 08 p. m.][05 08 2021].xml')
root = tree.getroot()


header_dict =	{
    "SerialNumber": "",
    "Family": "",
    "PartNumber": "",
    "Revision": "",
    "Process": "",
    "Station": "",
    "Operator": "",
    "Fixture": "",
    "Socket": "",
    "SequenceName": "",
    "StartTime": None,
    "EndTime": None
}


###UUTResult
UUTResult_dict =	{
    "UUTResult": "",
    "FailCode": None,
    "FailDescription": "",
    "Exectime": None
}

###StepResuults
StepName = []*4
StepType = []*4
StepStatus = []*4
StepResult = []*4
SequenceName = []*4
SequencePath = []*4
Exectime = []*4


def header_data(header_info):
    for TEResult in header_info:
        if TEResult.attrib.get('Name') == 'AdditionalResults':
            for prop_AdditionalResults in TEResult:
                for value_additionalResults in prop_AdditionalResults:
                    for prop_parameters in value_additionalResults:
                        # print(prop_parameters.tag)
                        for value_parameters in prop_parameters:
                            # print(value_parameters.attrib.get('Name'), str(value_parameters.find('Value').text))

                            if value_parameters.attrib.get('Name') == 'Operator out [Out]':
                                header_dict["Operator"] = str(value_parameters.find('Value').text)
                            if value_parameters.attrib.get('Name') == 'Serial Number out [Out]':
                                header_dict["SerialNumber"] = str(value_parameters.find('Value').text)
                            if value_parameters.attrib.get('Name') == 'Family out [Out]':
                                header_dict["Family"] = str(value_parameters.find('Value').text)
                            if value_parameters.attrib.get('Name') == 'Part Number out [Out]':
                                header_dict["PartNumber"] = str(value_parameters.find('Value').text)
                            if value_parameters.attrib.get('Name') == 'Revision out [Out]':
                                header_dict["Revision"] = str(value_parameters.find('Value').text)
                            if value_parameters.attrib.get('Name') == 'Process out [Out]':
                                header_dict["Process"] = str(value_parameters.find('Value').text)
                            if value_parameters.attrib.get('Name') == 'Fixture out [Out]':
                                header_dict["Fixture"] = str(value_parameters.find('Value').text)
    
    header_dict["Station"] = str(socket.gethostname())
    header_dict["Socket"] = "NA"

    
def header_data_(header_info):
    
    
    header_dict["Station"] = str(socket.gethostname())                      
      
    # "SequenceName": "",
    # "StartTime": 0,
    # "EndTime": 0
                            
                            # thisdict["year"] = 2018
                
                # print(prop_AdditionalResults.attrib.get('Name'))
            


def steps_info(steps_info):
    # print(header_info.attrib.get('Name'))
    for TEResult in steps_info:
        # print(TEResult.attrib)
        if TEResult.attrib.get('Name') == 'TS':
            for prop_TS in TEResult:
                # print(prop_TS.attrib.get('Name'))
                if prop_TS.attrib.get('Name') == 'StepName' and str(prop_TS.find('Value').text) == 'Sensor_Info':
                    # print(str(prop_TS.find('Value').text))
                    header_data(steps_info)




def steps_results(child):
    for child1 in child: ##
        for child2 in child1:
            print(child2.attrib)
            if child2.attrib.get('Name') == 'TS':
                print(child2.attrib)
                # for child3 in child2:
                #     print('StepName: '+str(child3.get('Value')))
            
    
    

def TEResult(prop):
    for child1 in prop:  ##TS
        if child1.attrib.get('Name') == 'TS':
            for child2 in child1:  ## SequenceCall
                for child3 in child2:  ##ResultList
                    for child4 in child3:   ##StepResults
                    
                        if child3.attrib.get('Name') == 'SequenceFile' and child4.tag == 'Value':
                            # print(os.path.splitext((os.path.basename(str(child3.find('Value').text))))[0])
                            header_dict["SequenceName"] = os.path.splitext((os.path.basename(str(child3.find('Value').text))))[0]
                            
                        if child3.attrib.get('Name') == 'ResultList' and child4.tag == 'Value':
                            for child5 in child4:  ##TEResult
                                for child6 in child5: ##TS
                                    for child7 in child6: 
                                        # if child6.attrib.get('Name') == 'TS':
                                        #     print(child7.attrib.get('Name'), str(child7.find('Value').text))
                                        if child7.attrib.get('Name') == 'StepName' and str(child7.find('Value').text) == 'Sensor_Info':
                                            steps_info(child5)
                                        
                                        
                    
def start_time(StartTime):
    for prop in StartTime:
        print(prop.attrib)
        if prop.attrib.get('Name') == 'Hours':
            hours = int(prop.find('Value').text)
        if prop.attrib.get('Name') == 'Minutes':
            minutes = int(prop.find('Value').text)
        if prop.attrib.get('Name') == 'Seconds':
            seconds = int(prop.find('Value').text)
    
    start = datetime.datetime(100,1,1,hours,minutes,seconds)  
    print(start.time())
    return start

def end_time(start_time, module_time):
    print((start_time + datetime.timedelta(seconds=module_time)).time())
    return (start_time + datetime.timedelta(seconds=module_time)).time()
    
    
def main():
    for child1 in root:  ##Report
        for child2 in child1:   ##Prop
            if child2.attrib.get('Type') == 'TEResult':
                TEResult(child2)
            if child2.attrib.get('Name') == 'StartTime':
                start = start_time(child2)
                header_dict["StartTime"] = start
            
            for child3 in child2: ##TS
                for child4 in child3: #Prop Module TIme
                    if child4.attrib.get('Name') == 'TotalTime':
                        print((child4.find('Value').text))
                        endTime = end_time(start, int(float(str(child4.find('Value').text))))
                        header_dict["EndTime"] = endTime
    
    
    
                
                
                
    # print(root.findall(".//Prop/..[@name='Value']"))
        
    
        
main()     


'''
Get Header info

Get UUT info

Get steps info
    Create lists of list for all steps, include fields for errors (even if they are not present)
    



'''